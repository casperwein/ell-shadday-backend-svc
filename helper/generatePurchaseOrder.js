const PurchaseOrder = require("./../models/index").purchase_order
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path')
const {setLog} = require("./response");
const currentDate = new Date();

const year = currentDate.getFullYear();
const month = String(currentDate.getMonth() + 1).padStart(2, '0');
const day = String(currentDate.getDate()).padStart(2, '0');

const formattedDate = `${year}-${month}-${day}`

const generatePurchaseOrderPDF = (purchaseOrder) => {
    try {
        const doc = new PDFDocument();
        const dir = '../public/purchase-order/'
        const po_name = `PurchaseOrder_${purchaseOrder.number}_${formattedDate}.pdf`
        const fileName = path.join(__dirname, dir, po_name)

        const po = purchaseOrder.number
        const data = {po, fileName}

        function UpdatePathPurchaseOrder () {
            PurchaseOrder.findOne({where: {po}}).then(dt => {
                dt.path = `public/purchase-order/${po_name}`
                dt.save()
                setLog("success update path to database", data)
            }).catch(error => {
                console.log(error)
                setLog("error add path", error)
            })
        }

        // Membuat file PDF
        doc.pipe(fs.createWriteStream(fileName));

        // Menambahkan konten ke PDF
        doc.fontSize(15).text('ELL SHADDAY', { align: 'left' });
        doc.fontSize(10).text('Jl. Griya Utama No. 10. RT/RW 07/08', { align: 'left' });
        doc.fontSize(10).text('Kel. Sunter Agung, Kec. Tanjung Priuk', { align: 'left' });
        doc.fontSize(10).text('Jakarta Utara - Indonesia', { align: 'left' });
        doc.fontSize(10).text('425353', { align: 'left' });
        doc.moveDown();

        doc.fontSize(20).text('Purchase Order', { align: 'center', underline: true });
        doc.fontSize(10).text(`No: ${purchaseOrder.number}`, { align: 'center' });
        doc.moveDown();
        doc.fontSize(14).text(`Date: ${purchaseOrder.date}`);
        doc.fontSize(14).text(`Status: ${purchaseOrder.status}`);
        doc.moveDown();

        doc.fontSize(15).text('Item:');
        doc.moveDown();

        purchaseOrder.items.forEach((item, index) => {
            const { kodebahan, quantity, warna } = item;
            doc.fontSize(15).text(`   Kode Bahan    : ${kodebahan}`);
            doc.fontSize(15).text(`   Warna         : ${warna}`);
            doc.fontSize(15).text(`   Quantity      : ${quantity}`);
            doc.moveDown();
        });

        doc.moveDown();
        doc.moveDown();
        doc.fontSize(15).text(`Supplier: ${purchaseOrder.supplier}`);

        doc.moveDown();
        doc.fontSize(12).text(`AutoGeneratedBySystem`, { align: 'right' });

        // Selesai membuat PDF
        doc.end();
        console.log(`File PDF Purchase Order berhasil dibuat: ${fileName}`);
        UpdatePathPurchaseOrder()
    } catch (e) {
        console.log(e)
    }
}

module.exports = generatePurchaseOrderPDF
